@page "/Setting/Messages"
@using back.Entities.JZ
@using back.Entities.Setting
@using System
@using Telegram.Bot.Types.Enums

<PageTitle>消息监控</PageTitle>

<AdminTable2 TItem="JzMessage" Context="item" PageSize="30" Title="消息管理" OnQuery="OnQuery" InitQuery="InitQuery"
    OnEdit="OnEdit" DialogClassName="modal-lg">

    <TableHeader>
        <th>消息ID</th>
        <th>发起人</th>
        <th>消息文本</th>
        <th>消息类型</th>
        <th>所属聊天</th>
        <th>创建时间</th>
    </TableHeader>
    <TableRow>
        <td>@item.MessageId</td>
        <td>@item.Member?.Username</td>
        <td>@(item.MessageText?.Length > 30 ? item.MessageText.Substring(0, 30) + "..." : item.MessageText ?? "")</td>
        <td>@item.Type</td>
        <td>@item.Chat?.Title</td>
        <td>@item.CreatedTime?.ToString("yyyy-MM-dd HH:mm:ss")</td>
    </TableRow>
    <EditTemplate>
        <div class="row">
            <div class="form-group col-12">
                <label class="form-label">消息ID</label>
                <input @bind="item.MessageId" type="number" class="form-control" placeholder="">
            </div>
            <div class="form-group col-12">
                <label class="form-label">消息文本</label>
                <input @bind="item.MessageText" type="text" class="form-control" placeholder="" maxlength="255">
            </div>
            <div class="form-group col-12">
                <label class="form-label">消息类型</label>
                <SelectEnum TEnum="MessageType" @bind-Value="item.Type" />
            </div>
            @if (!string.IsNullOrEmpty(item.PhotoFile) && item.PhotoFile !="文件ID不能为空")
            {
                <div class="form-group col-12">
                    <label class="form-label">消息图片</label>
                    <img src="@item.PhotoFile" alt="消息图片" class="img-fluid" style="max-width: 100%; ">
                </div>
            }
            <div class="form-group col-12">
                <label class="form-label">消息ID</label>
                <SelectEntity TItem="Member" TKey="long" @bind-Value="item.MemberId" DisplayText="e => e.Username" />
            </div>
            <div class="form-group col-12">
                <label class="form-label">所属聊天ID</label>
                <SelectEntity TItem="JzChat" TKey="long" @bind-Value="item.ChatId" DisplayText="e => e.Title" />
            </div>
        </div>
    </EditTemplate>
</AdminTable2>


@code {

    [Inject] IAggregateRootRepository<JzMessage> repo { get; set; }

    async Task InitQuery(AdminQueryInfo e)
    {
        var allMembers = await repo.Orm.Select<Member>().ToListAsync();
        var allJzChats = await repo.Orm.Select<JzChat>().ToListAsync();
        e.Filters = new AdminFilterInfo[]
        {
new AdminFilterInfo("消息ID", "MemberId", false, 12,
string.Join(",", allMembers.Select(a => a.Username)),
string.Join(",", allMembers.Select(a => a.Id))),
new AdminFilterInfo("所属聊天", "ChatId", false, 12,
string.Join(",", allJzChats.Select(a => a.Title)),
string.Join(",", allJzChats.Select(a => a.Id))),
        };
        await Task.Yield();
    }
    void OnQuery(AdminQueryEventArgs<JzMessage> e)
    {
        e.Select.Include(a => a.Member).Include(a => a.Chat)
        .WhereIf(e.Filters[0].HasValue, a => e.Filters[0].Values<long>().Contains(a.MemberId))
        .WhereIf(e.Filters[1].HasValue, a => e.Filters[1].Values<long>().Contains(a.ChatId))
        .WhereIf(!e.SearchText.IsNull(), a => a.MessageText.Contains(e.SearchText) ||
        a.CreatedUserName.Contains(e.SearchText));
    }

    async Task OnEdit(JzMessage item)
    {
        await Task.Yield();
    }

   
}
